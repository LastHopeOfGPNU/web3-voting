/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface VotingInterface extends Interface {
    getFunction(nameOrSignature: "MAX_BATCH" | "MAX_DESCRIPTION_LENGTH" | "createProposal" | "getProposal" | "getProposalResult" | "getProposalsRange" | "hasVoted" | "proposalCount" | "proposals" | "vote"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "ProposalCreated" | "VoteCast"): EventFragment;

    encodeFunctionData(functionFragment: 'MAX_BATCH', values?: undefined): string;
encodeFunctionData(functionFragment: 'MAX_DESCRIPTION_LENGTH', values?: undefined): string;
encodeFunctionData(functionFragment: 'createProposal', values: [string, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getProposal', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getProposalResult', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getProposalsRange', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'hasVoted', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'proposalCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'proposals', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'vote', values: [BigNumberish, boolean]): string;

    decodeFunctionResult(functionFragment: 'MAX_BATCH', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MAX_DESCRIPTION_LENGTH', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createProposal', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getProposal', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getProposalResult', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getProposalsRange', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasVoted', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'proposalCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'proposals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'vote', data: BytesLike): Result;
  }

  
    export namespace ProposalCreatedEvent {
      export type InputTuple = [proposalId: BigNumberish, description: string, creator: AddressLike, deadline: BigNumberish];
      export type OutputTuple = [proposalId: bigint, description: string, creator: string, deadline: bigint];
      export interface OutputObject {proposalId: bigint, description: string, creator: string, deadline: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VoteCastEvent {
      export type InputTuple = [proposalId: BigNumberish, voter: AddressLike, support: boolean];
      export type OutputTuple = [proposalId: bigint, voter: string, support: boolean];
      export interface OutputObject {proposalId: bigint, voter: string, support: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Voting extends BaseContract {
    
    connect(runner?: ContractRunner | null): Voting;
    waitForDeployment(): Promise<this>;

    interface: VotingInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    MAX_BATCH: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MAX_DESCRIPTION_LENGTH: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    createProposal: TypedContractMethod<
      [description: string, durationSeconds: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    getProposal: TypedContractMethod<
      [proposalId: BigNumberish, ],
      [[string, bigint, bigint, boolean, string, bigint] & {description: string, voteCountFor: bigint, voteCountAgainst: bigint, exists: boolean, creator: string, deadline: bigint }],
      'view'
    >
    

    
    getProposalResult: TypedContractMethod<
      [proposalId: BigNumberish, ],
      [[boolean, bigint] & {passed: boolean, totalVotes: bigint }],
      'view'
    >
    

    
    getProposalsRange: TypedContractMethod<
      [start: BigNumberish, count: BigNumberish, ],
      [[string[], bigint[], bigint[], string[], bigint[]] & {descriptions: string[], votesFor: bigint[], votesAgainst: bigint[], creators: string[], deadlines: bigint[] }],
      'view'
    >
    

    
    hasVoted: TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    proposalCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    proposals: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, bigint, bigint, boolean, string, bigint] & {description: string, voteCountFor: bigint, voteCountAgainst: bigint, exists: boolean, creator: string, deadline: bigint }],
      'view'
    >
    

    
    vote: TypedContractMethod<
      [proposalId: BigNumberish, support: boolean, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'MAX_BATCH'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MAX_DESCRIPTION_LENGTH'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'createProposal'): TypedContractMethod<
      [description: string, durationSeconds: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getProposal'): TypedContractMethod<
      [proposalId: BigNumberish, ],
      [[string, bigint, bigint, boolean, string, bigint] & {description: string, voteCountFor: bigint, voteCountAgainst: bigint, exists: boolean, creator: string, deadline: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getProposalResult'): TypedContractMethod<
      [proposalId: BigNumberish, ],
      [[boolean, bigint] & {passed: boolean, totalVotes: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getProposalsRange'): TypedContractMethod<
      [start: BigNumberish, count: BigNumberish, ],
      [[string[], bigint[], bigint[], string[], bigint[]] & {descriptions: string[], votesFor: bigint[], votesAgainst: bigint[], creators: string[], deadlines: bigint[] }],
      'view'
    >;
getFunction(nameOrSignature: 'hasVoted'): TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'proposalCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'proposals'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, bigint, bigint, boolean, string, bigint] & {description: string, voteCountFor: bigint, voteCountAgainst: bigint, exists: boolean, creator: string, deadline: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'vote'): TypedContractMethod<
      [proposalId: BigNumberish, support: boolean, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'ProposalCreated'): TypedContractEvent<ProposalCreatedEvent.InputTuple, ProposalCreatedEvent.OutputTuple, ProposalCreatedEvent.OutputObject>;
getEvent(key: 'VoteCast'): TypedContractEvent<VoteCastEvent.InputTuple, VoteCastEvent.OutputTuple, VoteCastEvent.OutputObject>;

    filters: {
      
      'ProposalCreated(uint256,string,address,uint256)': TypedContractEvent<ProposalCreatedEvent.InputTuple, ProposalCreatedEvent.OutputTuple, ProposalCreatedEvent.OutputObject>;
      ProposalCreated: TypedContractEvent<ProposalCreatedEvent.InputTuple, ProposalCreatedEvent.OutputTuple, ProposalCreatedEvent.OutputObject>;
    

      'VoteCast(uint256,address,bool)': TypedContractEvent<VoteCastEvent.InputTuple, VoteCastEvent.OutputTuple, VoteCastEvent.OutputObject>;
      VoteCast: TypedContractEvent<VoteCastEvent.InputTuple, VoteCastEvent.OutputTuple, VoteCastEvent.OutputObject>;
    
    };
  }